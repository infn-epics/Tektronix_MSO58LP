record(bi, "$(P):ReadbackPoll_$(CHANNEL)")
{
    field(DESC, "Head of readback chain")
    field(FLNK, "$(P):RAWYDATA_CH$(CHANNEL)")
    field(PINI, "YES")
    field(INP,  "0")
    field(SCAN, "$(SCANTIME)")
}



######### Channel parameters

record(ai, "$(P):XINC_CH$(CHANNEL)")
{
    field(DESC, "get x increment of plot")
    field(DTYP, "stream")
    field(INP,  "@devTektronix_MSO58LP.proto getXINC($(CHANNEL)) $(PORT)")
    field(PREC, "10")
    field(SCAN, "Event")
    field(PINI, "YES")
    field(EVNT, "$(P):refreshEvent_")
    field(FLNK, "$(P):YMULT_CH$(CHANNEL)")

}
record(ai, "$(P):YMULT_CH$(CHANNEL)")
{
    field(DESC, "get y multiplier of plot")
    field(DTYP, "stream")
    field(INP,  "@devTektronix_MSO58LP.proto getYMULT($(CHANNEL)) $(PORT)")
    field(FLNK, "$(P):YOFF_CH$(CHANNEL)")
   
}
record(ai, "$(P):YOFF_CH$(CHANNEL)")
{
    field(DESC, "get y offset of plot")
    field(DTYP, "stream")
    field(INP,  "@devTektronix_MSO58LP.proto getYOff($(CHANNEL)) $(PORT)")
    field(FLNK, "$(P):XUNIT_CH$(CHANNEL)")
    
}


record(stringin, "$(P):XUNIT_CH$(CHANNEL)")
{
    field(DESC, "get x unit of plot")
    field(DTYP, "stream")
    field(INP,  "@devTektronix_MSO58LP.proto getXUNIT($(CHANNEL)) $(PORT)")
    field(FLNK, "$(P):YUNIT_CH$(CHANNEL)")
   
}

record(stringin, "$(P):YUNIT_CH$(CHANNEL)")
{
    field(DESC, "get y unit of plot")
    field(DTYP, "stream")
    field(INP,  "@devTektronix_MSO58LP.proto getYUNIT($(CHANNEL)) $(PORT)")
    field(FLNK, "$(P):WFID_CH$(CHANNEL)")

}

record(stringin, "$(P):WFID_CH$(CHANNEL)")
{
    field(DESC, "Waveform ID info for CH$(CHANNEL)")
    field(DTYP, "stream")
    field(INP,  "@devTektronix_MSO58LP.proto getWFID($(CHANNEL)) $(PORT)")
    field(FLNK, "$(P):NR_PT_CH$(CHANNEL)")
}

record(longin, "$(P):NR_PT_CH$(CHANNEL)")
{
    field(DESC, "Number of points in waveform")
    field(DTYP, "stream")
    field(INP,  "@devTektronix_MSO58LP.proto getNR_PT($(CHANNEL)) $(PORT)")
    field(FLNK, "$(P):calcxtime$(CHANNEL)_")
}

record(aSub,"$(P):calcxtime$(CHANNEL)_") 
{
    field(SNAM, "incrementor")
    field(FTA,  "DOUBLE")
    field(INPA, "$(P):XINC_CH$(CHANNEL)")
    field(OUTA, "$(P):XDATA_CH$(CHANNEL)")
    field(FTVA, "DOUBLE")
    field(NOVA, $(NELM))
    field(NEVA, $(NELM))
    field(FLNK, "$(P):XDATA_CH$(CHANNEL)")
}

record(waveform, "$(P):XDATA_CH$(CHANNEL)")
{
    field(INP, "$(P):calcxtime$(CHANNEL)_.VALA")
    field(DTYP, "Soft Channel")
    field(NELM, $(NELM))
    field(FTVL, "DOUBLE")
}

#########

record(bo, "$(P):AcquireWindow_$(CHANNEL)")
{
    field(DESC, "Acquire Just Marker window")
    field(PINI, "NO")
    field(ZNAM, "Idle")
    field(ONAM, "Acquire")
    field(VAL, "0")
    field(HIGH, "1")
    field(FLNK, "$(P):calc_window_$(CHANNEL)_")
    field(DOL, "1")     # force 1 on processing
    field(OMSL, "supervisory")
    field(OUT, "$(P):AcquireWindow_$(CHANNEL).PROC")  # write to self for momentary behavior
}


record(bo, "$(P):ResetAcquire_$(CHANNEL)")
{
    field(DESC, "Reset Acquire")
    field(PINI, "NO")
    field(ZNAM, "Idle")
    field(ONAM, "Acquire")
    field(VAL, "0")
    field(HIGH, "1")
    field(FLNK, "$(P):calc_reset_$(CHANNEL)_")
    field(DOL, "1")     # force 1 on processing
    field(OMSL, "supervisory")
    field(OUT, "$(P):ResetAcquire_$(CHANNEL).PROC")  # write to self for momentary behavior
}
record(bo, "$(P):AcquireMath_$(CHANNEL)")
{
    field(DESC, "Acquire Just Marker window")
    field(PINI, "NO")
    field(ZNAM, "Idle")
    field(ONAM, "Acquire")
    field(VAL, "0")
    field(HIGH, "1")
    field(FLNK, "$(P):calc_math_$(CHANNEL)_")
    field(DOL, "1")     # force 1 on processing
    field(OMSL, "supervisory")
    field(OUT, "$(P):AcquireMath_$(CHANNEL).PROC")  # write to self for momentary behavior
}

# Per-channel marker positions
record(ai, "$(P):CH$(CHANNEL):MARKER_START") {
    field(DESC, "Channel $(CHANNEL) start marker (s)")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
    field(VAL, "0.0")
    field(EGU,"s")
    field(PINI, "YES")
    field(FLNK, "$(P):MARKER_START_SAMPLE_CH$(CHANNEL)")
}

record(ai, "$(P):CH$(CHANNEL):MARKER_END") {
    field(DESC, "Channel $(CHANNEL) end marker (s))")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
    field(VAL, "1e-6")
    field(EGU,"s")

    field(PINI, "YES")
    field(FLNK, "$(P):MARKER_END_SAMPLE_CH$(CHANNEL)")
}

record(calc,"$(P):MARKER_START_SAMPLE_CH$(CHANNEL)"){
    field(INPA,"$(P):CH$(CHANNEL):MARKER_START CP")
    field(INPB,"$(P):XINC_CH$(CHANNEL)")
    field(CALC,"(B>0.0)?A/B:0")
}

record(calc,"$(P):MARKER_END_SAMPLE_CH$(CHANNEL)"){
    field(INPA,"$(P):CH$(CHANNEL):MARKER_END CP")
    field(INPB,"$(P):XINC_CH$(CHANNEL)")
    field(CALC,"(B>0.0)?A/B:$(NELM)")
}

record(calcout, "$(P):SAMPLES_CH$(CHANNEL)"){
    field(INPA,"$(P):MARKER_END_SAMPLE_CH$(CHANNEL)")
    field(INPB,"$(P):MARKER_START_SAMPLE_CH$(CHANNEL)")
    field(CALC,"((A-B)>0)?A-B:$(NELM)")
    field(OUT,"$(P):SCALEDYDATA_CH$(CHANNEL).NUSE NPP")
#    field(FLNK, "$(P):CHANGE_PARAMS_CH$(CHANNEL)")
}


# record(ao, "$(P):CHANGE_PARAMS_CH$(CHANNEL)")
# {
#     field(DESC, "Change parameters")
#     field(DTYP, "stream")
#     field(OUT,  "@devTektronix_MSO58LP.proto setTransfer($(CHANNEL),$(P):START_SAMPLE_CH$(CHANNEL).VAL,$(P):END_SAMPLE_CH$(CHANNEL).VAL PP) $(PORT)")
#     field(PINI,"YES")
#     field(SCAN,"Passive")
# }

# record(calcout,"$(P):SAMPLES_CH$(CHANNEL)2MEAN_"){
#     field(INPA,"$(P):SAMPLES_CH$(CHANNEL) CP")
#     field(CALC,"A")
#     field(DOPT, "Use CALC")

#     field(OUT,"$(P):MEAN_CH$(CHANNEL)_.NUSE CP")   
# }

# record(calcout,"$(P):SAMPLES_CH$(CHANNEL)2MIN_"){
#     field(INPA,"$(P):SAMPLES_CH$(CHANNEL) CP")
#     field(CALC,"A")
#     field(DOPT, "Use CALC")
#     field(OUT,"$(P):MIN_CH$(CHANNEL)_.NUSE CP")   
# }
# record(calcout,"$(P):SAMPLES_CH$(CHANNEL)2MAX_"){
#     field(INPA,"$(P):SAMPLES_CH$(CHANNEL) CP")
#     field(CALC,"A")
#     field(DOPT, "Use CALC")
#     field(OUT,"$(P):MAX_CH$(CHANNEL)_.NUSE CP")   
# }

# record(calcout,"$(P):SAMPLES_CH$(CHANNEL)2INTEGRAL_"){
#     field(INPA,"$(P):SAMPLES_CH$(CHANNEL) CP")
#     field(CALC,"A")
#     field(DOPT, "Use CALC")
#     field(OUT,"$(P):INTEGRAL_CH$(CHANNEL)_.NUSE CP")   
# }

# record(calcout,"$(P):SAMPLES_CH$(CHANNEL)2RMS_"){
#     field(INPA,"$(P):SAMPLES_CH$(CHANNEL) CP")
#     field(CALC,"A")
#     field(DOPT, "Use CALC")
#     field(OUT,"$(P):RMS_CH$(CHANNEL)_.NUSE CP")   
# }


record(fanout,"$(P):calc_window_$(CHANNEL)_"){
    field(LNK0, "$(P):calcsample_start_$(CHANNEL)_")
    field(LNK1, "$(P):calcsample_end_$(CHANNEL)_")
    field(LNK2, "$(P):calcmath_start_$(CHANNEL)_")
    field(LNK3, "$(P):calcmath_end_$(CHANNEL)_")
    field(LNK4, "$(P):marker_end_refresh_$(CHANNEL)_")
    field(LNK5, "$(P):marker_start_refresh_$(CHANNEL)_")
    field(LNK6, "$(P):SAMPLES_CH$(CHANNEL)")


}

record(fanout,"$(P):calc_math_$(CHANNEL)_"){
    field(LNK1, "$(P):calcmath_start_$(CHANNEL)_")
    field(LNK2, "$(P):calcmath_end_$(CHANNEL)_")

}
record(fanout,"$(P):calc_reset_$(CHANNEL)_"){
    field(LNK1, "$(P):calcreset_start_$(CHANNEL)_")
    field(LNK2, "$(P):calcreset_end_$(CHANNEL)_")
    field(LNK3, "$(P):CH$(CHANNEL):reset_start_marker_")
    field(LNK4, "$(P):CH$(CHANNEL):reset_end_marker_")
}

# Reset buttons for per-channel markers
record(calcout, "$(P):CH$(CHANNEL):reset_start_marker_")
{
    field(DESC, "Reset CH$(CHANNEL) start marker")
    field(CALC, "0")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):CH$(CHANNEL):MARKER_START PP")
}

record(calcout, "$(P):CH$(CHANNEL):reset_end_marker_")
{
    field(DESC, "Reset CH$(CHANNEL) end marker")
    field(INPA, "$(P):MAXSAMPLES_CH$(CHANNEL)")
    field(INPB, "$(P):XINC_CH$(CHANNEL)")
    field(CALC, "A*B")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):CH$(CHANNEL):MARKER_END PP")
}

# Auto-marker detection threshold
record(ao, "$(P):CH$(CHANNEL):AUTO_THRESHOLD") {
    field(DESC, "Auto marker detection threshold")
    field(DTYP, "Soft Channel")
    field(PREC, "6")
    field(VAL, "0.1")
    field(EGU, "V")
    field(PINI, "YES")
}

# Trigger auto marker detection
record(bo, "$(P):CH$(CHANNEL):AUTO_MARKER")
{
    field(DESC, "Auto-find signal and set markers")
    field(PINI, "NO")
    field(ZNAM, "Idle")
    field(ONAM, "Find")
    field(VAL, "0")
    field(HIGH, "1")
    field(FLNK, "$(P):CH$(CHANNEL):auto_detect_signal_")
    field(DOL, "1")
    field(OMSL, "supervisory")
    field(OUT, "$(P):CH$(CHANNEL):AUTO_MARKER.PROC")
}

# Auto-detection using aSub record (requires custom C function)
record(aSub, "$(P):CH$(CHANNEL):auto_detect_signal_") {
    field(SNAM, "autoDetectSignal")
    field(DESC, "Find signal edges automatically")
    
    # Inputs
    field(FTA, "DOUBLE") field(INPA, "$(P):CH$(CHANNEL):AUTO_THRESHOLD")
    field(FTB, "DOUBLE") field(INPB, "$(P):XINC_CH$(CHANNEL)")
    field(FTC, "DOUBLE") field(NEVC, "$(NELM)") field(INPC, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL NPP NMS")
    field(FTD, "LONG") field(INPD, "$(P):SAMPLES_CH$(CHANNEL)")
    
    # Outputs
    field(FTVA, "DOUBLE") field(NOVA, "1")  # Start time
    field(FTVB, "DOUBLE") field(NOVB, "1")  # End time
    field(FTVC, "LONG") field(NOVC, "1")    # Found flag
    
    field(OUTA, "$(P):CH$(CHANNEL):AUTO_START_TIME PP")
    field(OUTB, "$(P):CH$(CHANNEL):AUTO_END_TIME PP")
    field(OUTC, "$(P):CH$(CHANNEL):AUTO_FOUND PP")
}

# Temporary storage for detected times
record(ai, "$(P):CH$(CHANNEL):AUTO_START_TIME") {
    field(DESC, "Auto-detected start time")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
    field(EGU, "s")
    field(FLNK, "$(P):CH$(CHANNEL):apply_auto_markers_")
}

record(ai, "$(P):CH$(CHANNEL):AUTO_END_TIME") {
    field(DESC, "Auto-detected end time")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
    field(EGU, "s")
}

record(longin, "$(P):CH$(CHANNEL):AUTO_FOUND") {
    field(DESC, "Signal found flag (1=found)")
    field(DTYP, "Soft Channel")
}

# Apply detected markers if signal was found
record(calcout, "$(P):CH$(CHANNEL):apply_auto_markers_") {
    field(DESC, "Apply auto markers if found")
    field(INPA, "$(P):CH$(CHANNEL):AUTO_FOUND NPP NMS")
    field(INPB, "$(P):CH$(CHANNEL):AUTO_START_TIME NPP NMS")
    field(CALC, "A>0")  # Only process if signal was found
    field(DOPT, "Use CALC")
    field(OOPT, "When Non-zero")
    field(OUT, "$(P):CH$(CHANNEL):set_auto_start_ PP")
}

record(calcout, "$(P):CH$(CHANNEL):set_auto_start_") {
    field(DESC, "Set start marker from auto-detect")
    field(INPA, "$(P):CH$(CHANNEL):AUTO_START_TIME NPP NMS")
    field(CALC, "A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):CH$(CHANNEL):MARKER_START PP")
    field(FLNK, "$(P):CH$(CHANNEL):set_auto_end_")
}

record(calcout, "$(P):CH$(CHANNEL):set_auto_end_") {
    field(DESC, "Set end marker from auto-detect")
    field(INPA, "$(P):CH$(CHANNEL):AUTO_END_TIME NPP NMS")
    field(CALC, "A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):CH$(CHANNEL):MARKER_END PP")
}

record(calcout,"$(P):marker_end_refresh_$(CHANNEL)_"){
    field(DESC, "update end marker ")
    field(INPA,"$(P):MARKER_END_SAMPLE_CH$(CHANNEL) NPP NMS")
    field(INPB,"$(P):XINC_CH$(CHANNEL) NPP NMS")
    field(CALC, "(A-10)*B")  
    field(DOPT, "Use CALC")
    field(OUT, "$(P):CH$(CHANNEL):MARKER_END PP")
}
record(calcout,"$(P):marker_start_refresh_$(CHANNEL)_"){
    field(DESC, "update start marker ")
    field(INPA,"$(P):MARKER_START_SAMPLE_CH$(CHANNEL) NPP NMS")
    field(INPB,"$(P):XINC_CH$(CHANNEL) NPP NMS")
    field(CALC, "(A+10)*B")  
    field(DOPT, "Use CALC")
    field(OUT, "$(P):CH$(CHANNEL):MARKER_START PP")
}
record(calcout,"$(P):calcsample_end_$(CHANNEL)_"){
    field(DESC, "calculate sample end from marker")
    field(INPA,"$(P):MARKER_END_SAMPLE_CH$(CHANNEL) NPP NMS")
    field(CALC, "A")  
    field(DOPT, "Use CALC")
    field(OUT, "$(P):END_SAMPLE_CH$(CHANNEL)")
    field(FLNK, "$(P):END_SAMPLE_CH$(CHANNEL)")
}
record(calcout,"$(P):calcsample_start_$(CHANNEL)_"){
    field(DESC, "calculate sample start from marker")
    field(INPA,"$(P):MARKER_START_SAMPLE_CH$(CHANNEL) NPP NMS")
    field(CALC, "A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):START_SAMPLE_CH$(CHANNEL)")
    field(FLNK, "$(P):START_SAMPLE_CH$(CHANNEL)")
}

record(calcout,"$(P):calcmath_end_$(CHANNEL)_"){
    field(DESC, "calculate sample end from marker")
    field(INPA,"$(P):MARKER_END_SAMPLE_CH$(CHANNEL) NPP NMS")
    field(CALC, "A")  
    field(DOPT, "Use CALC")
    field(OUT, "$(P):END_MATH_CH$(CHANNEL)")
    field(FLNK, "$(P):END_MATH_CH$(CHANNEL)")
}
record(calcout,"$(P):calcmath_start_$(CHANNEL)_"){
    field(DESC, "calculate sample start from marker")
    field(INPA,"$(P):MARKER_START_SAMPLE_CH$(CHANNEL) NPP NMS")
    field(CALC, "A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):START_MATH_CH$(CHANNEL)")
    field(FLNK, "$(P):START_MATH_CH$(CHANNEL)")
}
record(calcout,"$(P):calcreset_start_$(CHANNEL)_"){
    field(DESC, "reset start sample")
    field(CALC, "0")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):START_SAMPLE_CH$(CHANNEL)")
    field(FLNK, "$(P):START_SAMPLE_CH$(CHANNEL)")
}


record(calcout,"$(P):calcreset_end_$(CHANNEL)_"){
    field(DESC, "reset end sample")
    field(INPA,"$(P):MAXSAMPLES_CH$(CHANNEL) NPP NMS")
    field(CALC, "A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):END_SAMPLE_CH$(CHANNEL)")
    field(FLNK, "$(P):END_SAMPLE_CH$(CHANNEL)")
}

record(stringout,"$(P):LABEL_CH$(CHANNEL)")
{
    field(DESC, "Channel Label")
    field(DTYP, "stream")
    field(OUT,  "@devTektronix_MSO58LP.proto setLabel($(CHANNEL)) $(PORT)")
    field(VAL,"$(CHANAME=CH$(CHANNEL))")
    field(PINI,"YES")
    field(SCAN,"Passive")
}


record(waveform, "$(P):RAWYDATA_CH$(CHANNEL)")
{
    field(DESC, "Get y data points")
    field(DTYP, "stream")
    field(NELM, $(NELM))
    field(FTVL, "SHORT")
    field(INP,  "@devTektronix_MSO58LP.proto getYDATA($(CHANNEL),$(P):START_SAMPLE_CH$(CHANNEL).VAL,$(P):END_SAMPLE_CH$(CHANNEL).VAL PP) $(PORT)")
    #field(INP,  "@devTektronix_MSO58LP.proto getYDATAs($(CHANNEL)) $(PORT)")
   
    field(FLNK, "$(P):check_acquisition_$(CHANNEL)_")
}

# Store previous SEVR state to detect recovery transitions
record(ai, "$(P):PREV_SEVR_CH$(CHANNEL)")
{
    field(DESC, "Previous SEVR state")
    field(PINI, "YES")
    field(VAL, "0")
}

# Gate scaling: only process if acquisition succeeded AND not first buffer after recovery
record(calcout, "$(P):check_acquisition_$(CHANNEL)_")
{
    field(DESC, "Gate processing on acquisition success")
    field(INPA, "$(P):RAWYDATA_CH$(CHANNEL).SEVR NPP NMS")
    field(INPB, "$(P):PREV_SEVR_CH$(CHANNEL) NPP NMS")
    field(CALC, "(A<2)&&(B<2)")  # Process only if current OK AND previous was OK
    field(DOPT, "Use CALC")
    field(OOPT, "When Non-zero")  # Only process downstream if result is 1
    field(OUT, "$(P):SCALEDYDATA_CH$(CHANNEL).PROC PP")
    field(FLNK, "$(P):update_prev_sevr_$(CHANNEL)_")
}

# Update previous SEVR after checking
record(calcout, "$(P):update_prev_sevr_$(CHANNEL)_")
{
    field(DESC, "Store current SEVR for next cycle")
    field(INPA, "$(P):RAWYDATA_CH$(CHANNEL).SEVR NPP NMS")
    field(CALC, "A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):PREV_SEVR_CH$(CHANNEL) PP")
}

record(bi, "$(P):CH$(CHANNEL):COMM_OK")
{
    field(DESC, "StreamDevice communication status")
    field(INP, "$(P):RAWYDATA_CH$(CHANNEL).SEVR CP")
    field(ZNAM, "OK")
    field(ONAM, "FAIL")
    field(PINI, "YES")
    field(VAL, "1")
}
#
record(acalcout, "$(P):SCALEDYDATA_CH$(CHANNEL)") {
    field(DESC, "scaled waveform")
    field(NELM, "$(NELM)")
    field(NUSE, "$(NELM)")
    field(SIZE,"NUSE")
    field(INAA, "$(P):RAWYDATA_CH$(CHANNEL)")
    field(INPA, "$(P):YMULT_CH$(CHANNEL)")
    field(INPB,"$(P):YOFF_CH$(CHANNEL)")
    field(CALC, "AA*A+B")
    #field(OUT, "$(P):SCALEDYDATA_CH$(CHANNEL)")
    #field(FLNK, "$(P):wavestats_$(CHANNEL)_")
    field(FLNK, "$(P):MATH_ARRAY_CH$(CHANNEL)")

}

record(subArray, "$(P):MATH_ARRAY_CH$(CHANNEL)") {
    field(DESC, "math waveform")
    field(INP, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL")  # Link to full waveform
    field(FTVL, "DOUBLE")                    # Must match waveform type
    field(MALM, "$(NELM)")                   # Max number of elements
    field(INDX, "0")  # Start index                 
    field(NELM, "$(NELM)")                     #
    field(FLNK, "$(P):MAX_CH$(CHANNEL)_")
}

record(acalcout, "$(P):MAX_CH$(CHANNEL)_") {
    field(INAA, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL")
    field(NELM, "$(NELM)")
    field(CALC, "AMAX(AA)")
    field(OUT,"$(P):MAX_CH$(CHANNEL) CP")
    #field(FLNK, "$(P):wavestats_$(CHANNEL)_")
    field(FLNK, "$(P):MIN_CH$(CHANNEL)_")


}

record(acalcout, "$(P):MIN_CH$(CHANNEL)_") {
    field(NELM, "$(NELM)")
    field(INAA, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL")
    field(CALC, "AMIN(AA)")
    field(OUT,"$(P):MIN_CH$(CHANNEL) CP")
    field(FLNK, "$(P):MEAN_CH$(CHANNEL)_")
}
record(acalcout, "$(P):MEAN_CH$(CHANNEL)_") {
    field(NELM, "$(NELM)")

    field(INAA, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL")
    field(CALC, "AVG(AA)")
    field(OUT,"$(P):MEAN_CH$(CHANNEL) CP")
    field(FLNK, "$(P):INTEGRAL_CH$(CHANNEL)_")

    #field(FLNK, "$(P):wavestats_$(CHANNEL)_")

}
record(acalcout, "$(P):INTEGRAL_CH$(CHANNEL)_") {
    field(NELM, "$(NELM)")

    field(INAA, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL")
    field(INPA, "$(P):XINC_CH$(CHANNEL)")
    field(CALC, "SUM(AA)*A")
    field(OUT,"$(P):INTEGRAL_CH$(CHANNEL) PP")
    field(FLNK, "$(P):CHARGE_CH$(CHANNEL)_")
}

record(calcout, "$(P):CHARGE_CH$(CHANNEL)_") {
    field(DESC, "Charge pC")
    field(INPA, "$(P):INTEGRAL_CH$(CHANNEL).VAL NPP NMS")
    field(INPB, "$(P):COEFF_CH$(CHANNEL)")
    field(CALC, "A*B")
    field(EGU, "pC")

    field(OUT, "$(P):CHARGE_CH$(CHANNEL) PP")
    field(FLNK, "$(P):RMS_CH$(CHANNEL)_")
}

record(acalcout, "$(P):RMS_CH$(CHANNEL)_") {
    field(NELM, "$(NELM)")

    field(INAA, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL")
    field(INPA, "$(P):SAMPLES_CH$(CHANNEL)")

    field(CALC, "SQRT((SUM(AA^2))/A)")
    field(OUT,"$(P):RMS_CH$(CHANNEL) CP")
    field(FLNK, "$(P):MATH_MAX_CH$(CHANNEL)_")
}

# record(waveform, "$(P):SCALEDYDATA_CH$(CHANNEL)")
# {
#     field(DESC, "Get y data points")
#     field(NELM, $(NELM))
#     field(FTVL, "DOUBLE")
#     field(FLNK, "$(P):wavestats_$(CHANNEL)_")

# }

record(calcout, "$(P):samples_for_math_$(CHANNEL)"){
    field(INPA,"$(P):MARKER_END_SAMPLE_CH$(CHANNEL) CP")
    field(INPB,"$(P):MARKER_START_SAMPLE_CH$(CHANNEL) CP")
    field(CALC,"((A-B)>0)?A-B:$(NELM)")
    field(OUT,"$(P):MATH_ARRAY_CH$(CHANNEL).NELM PP")   
}

record(calcout, "$(P):pickvalue_start$(CHANNEL)_math")
{
    field(DESC, "pick samples")
    field(INPA,"$(P):MARKER_START_SAMPLE_CH$(CHANNEL) CP")
    
    field(CALC,"A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):MATH_ARRAY_CH$(CHANNEL).INDX")
}


### SUBARRAYS MATH

record(acalcout, "$(P):MATH_MAX_CH$(CHANNEL)_") {
    field(INAA, "$(P):MATH_ARRAY_CH$(CHANNEL)")
    field(CALC, "AMAX(AA)")
    field(OUT,"$(P):MATH_MAX_CH$(CHANNEL) CP")
    field(FLNK, "$(P):MATH_MIN_CH$(CHANNEL)_")
}

record(acalcout, "$(P):MATH_MIN_CH$(CHANNEL)_") {
    field(INAA, "$(P):MATH_ARRAY_CH$(CHANNEL)")
    field(CALC, "AMIN(AA)")
    field(OUT,"$(P):MATH_MIN_CH$(CHANNEL) CP")
    field(FLNK, "$(P):MATH_MEAN_CH$(CHANNEL)_")
}

record(acalcout, "$(P):MATH_MEAN_CH$(CHANNEL)_") {
    field(INAA, "$(P):MATH_ARRAY_CH$(CHANNEL)")
    field(CALC, "AVG(AA)")
    field(OUT,"$(P):MATH_MEAN_CH$(CHANNEL) CP")
    field(FLNK, "$(P):MATH_INTEGRAL_CH$(CHANNEL)_")

    #field(FLNK, "$(P):wavestats_$(CHANNEL)_")

}
record(acalcout, "$(P):MATH_INTEGRAL_CH$(CHANNEL)_") {

    field(INAA, "$(P):MATH_ARRAY_CH$(CHANNEL)")
    field(INPA, "$(P):XINC_CH$(CHANNEL)")

    field(CALC, "SUM(AA)*A")
    field(OUT,"$(P):MATH_INTEGRAL_CH$(CHANNEL) PP")
    field(FLNK, "$(P):MATH_CHARGE_CH$(CHANNEL)_")
}

record(calcout, "$(P):MATH_CHARGE_CH$(CHANNEL)_") {
    field(DESC, "Math charge from integral")
    field(INPA, "$(P):MATH_INTEGRAL_CH$(CHANNEL).VAL NPP NMS")
    field(INPB, "$(P):COEFF_CH$(CHANNEL)")
    field(CALC, "A*B")
    field(EGU, "pC")
    field(OUT, "$(P):MATH_CHARGE_CH$(CHANNEL) PP")
    field(FLNK, "$(P):MATH_RMS_CH$(CHANNEL)_")
}

record(acalcout, "$(P):MATH_RMS_CH$(CHANNEL)_") {

    field(INAA, "$(P):MATH_ARRAY_CH$(CHANNEL)")
    field(INPA, "$(P):samples_for_math_$(CHANNEL)")

    field(CALC, "SQRT((SUM(AA^2))/A)")
    field(OUT,"$(P):MATH_RMS_CH$(CHANNEL) CP")
}

######

record(calcout, "$(P):pickvalue_start$(CHANNEL)")
{
    field(DESC, "pick samples")
    field(INPA,"$(P):MARKER_START_SAMPLE_CH$(CHANNEL) CP")
    
    field(CALC,"A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):MARKER_START_VALUE_$(CHANNEL).INDX")
    field(FLNK,"$(P):MARKER_START_VALUE_$(CHANNEL)")

}


record(calcout, "$(P):pickvalue_end$(CHANNEL)")
{
    field(DESC, "pick samples")
    field(INPA,"$(P):MARKER_END_SAMPLE_CH$(CHANNEL) CP")
    field(CALC,"A")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):MARKER_END_VALUE_$(CHANNEL).INDX")
    field(FLNK,"$(P):MARKER_END_VALUE_$(CHANNEL)")
}
record(subArray, "$(P):MARKER_START_VALUE_$(CHANNEL)") {
    field(DESC, "Subset of waveform")
    field(INP, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL NPP NMS")  # Link to full waveform
    field(FTVL, "DOUBLE")                    # Must match waveform type
    field(MALM, "$(NELM)")                   # Max number of elements
    field(INDX, "0")                  
    field(NELM, "1")
    field(PREC,"4")
                    
}


record(subArray, "$(P):MARKER_END_VALUE_$(CHANNEL)") {
    field(DESC, "Subset of waveform")
    field(INP, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL NPP NMS")  # Link to full waveform
    field(FTVL, "DOUBLE")                    # Must match waveform type
    field(MALM, "$(NELM)")                   # Max number of elements
    field(INDX, "0")                 
    field(NELM, "1") 
    field(FTVL, "DOUBLE")                    # Must match waveform type
    field(PREC,"4")
                    
}

# record(aSub, "$(P):wavestats_$(CHANNEL)_") {
#     field(SNAM, "wavestats")
#     field(FTA, "DOUBLE") field(INPA, "$(P):XINC_CH$(CHANNEL)")
#     field(FTB, "DOUBLE") field(INPB, "$(P):COEFF_CH$(CHANNEL)")
#     field(FTC, "DOUBLE") field(NEVC,"$(NELM)") field(INPC, "$(P):SCALEDYDATA_CH$(CHANNEL).AVAL PP") 
#     field(FTD, "LONG") field(INPD, "$(P):RAWYDATA_CH$(CHANNEL).NORD")
#     field(FTE, "LONG") field(INPE, "$(P):START_MATH_CH$(CHANNEL)") ## start sample
#     field(FTF, "LONG") field(INPF, "$(P):END_MATH_CH$(CHANNEL)") ## end sample

#     #field(FTE, "LONG") field(INPE, "$(P):RAWYDATA_CH$(CHANNEL).NORD")
#     field(FTVA, "DOUBLE") 
#     field(NOVA, "1")  # Integral
#     field(FTVB, "DOUBLE") 
#     field(NOVB, "1")  # Mean
#     field(FTVC, "DOUBLE") 
#     field(NOVC, "1")  # Min
#     field(FTVD, "DOUBLE") 
#     field(NOVD, "1")  # Max
#     field(FTVE, "DOUBLE") 
#     field(NOVE, "1")  # RMS
#     field(OUTA, "$(P):INTEGRAL_CH$(CHANNEL) PP")
#     field(OUTB, "$(P):MEAN_CH$(CHANNEL) PP")
#     field(OUTC, "$(P):MIN_CH$(CHANNEL) PP")
#     field(OUTD, "$(P):MAX_CH$(CHANNEL) PP")
#     field(OUTE, "$(P):RMS_CH$(CHANNEL) PP")
# }

record(ai, "$(P):MEAN_CH$(CHANNEL)") {
    field(DESC, "Mean value of waveform")
    field(DTYP, "Soft Channel")
    field(EGU,  "V")
    field(PREC, "9")
}

record(ai, "$(P):MIN_CH$(CHANNEL)") {
    field(DESC, "Minimum value of waveform")
    field(DTYP, "Soft Channel")
    field(EGU,  "V")

    field(PREC, "9")
}

record(ai, "$(P):MAX_CH$(CHANNEL)") {
    field(DESC, "Maximum value of waveform")
    field(DTYP, "Soft Channel")
    field(EGU,  "V")
    field(PREC, "9")
}

record(ai, "$(P):RMS_CH$(CHANNEL)") {
    field(DESC, "RMS value of waveform")
    field(DTYP, "Soft Channel")
    field(EGU,  "V")

    field(PREC, "9")
}

record(ai, "$(P):INTEGRAL_CH$(CHANNEL)") {
    field(DESC, "INTEGRAL value of waveform")
    field(EGU,  "Vs")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
}

record(ai, "$(P):CHARGE_CH$(CHANNEL)") {
    field(DESC, "CHARGE from integral * coeff")
    field(EGU,  "C")
    field(DTYP, "Soft Channel")
    field(PREC, "12")
}

record(ai, "$(P):MATH_MEAN_CH$(CHANNEL)") {
    field(DESC, "Mean value of math wave")
    field(DTYP, "Soft Channel")
    field(EGU,  "V")

    field(PREC, "9")
}

record(ai, "$(P):MATH_MIN_CH$(CHANNEL)") {
    field(DESC, "Minimum value of math wave")
    field(DTYP, "Soft Channel")
    field(EGU,  "V")

    field(PREC, "9")
}

record(ai, "$(P):MATH_MAX_CH$(CHANNEL)") {
    field(DESC, "Maximum value of math wave")
    field(DTYP, "Soft Channel")
    field(EGU,  "V")

    field(PREC, "9")
}

record(ai, "$(P):MATH_RMS_CH$(CHANNEL)") {
    field(DESC, "RMS value of math wave")
    field(DTYP, "Soft Channel")
    field(EGU,  "V")

    field(PREC, "9")
}

record(ai, "$(P):MATH_INTEGRAL_CH$(CHANNEL)") {
    field(DESC, "INTEGRAL value of math wave")
    field(EGU,  "Vs")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
}

record(ai, "$(P):MATH_CHARGE_CH$(CHANNEL)") {
    field(DESC, "CHARGE from math integral * coeff")
    field(EGU,  "C")
    field(DTYP, "Soft Channel")
    field(PREC, "12")
}

record(ai, "$(P):MAXSAMPLES_CH$(CHANNEL)"){
    field(PINI, "YES")
    field(VAL, "$(NELM)")
}

record(ai, "$(P):START_SAMPLE_CH$(CHANNEL)")
{
    field(DESC, "Acquire from SAMPLE ")
    field(DTYP, "Soft Channel")
    field(PREC, "4")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(VAL, 0)
    field(FLNK,"$(P):SAMPLES_CH$(CHANNEL)")
}


record(ai, "$(P):END_SAMPLE_CH$(CHANNEL)")
{
    field(DESC, "Acquire end SAMPLE ")
    field(DTYP, "Soft Channel")
    field(PREC, "4")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(VAL, $(NELM))
    field(FLNK,"$(P):SAMPLES_CH$(CHANNEL)")


}

record(ai, "$(P):START_MATH_CH$(CHANNEL)")
{
    field(DESC, "Math from sample")
    field(DTYP, "Soft Channel")
    field(PREC, "10")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(VAL, 0)
}

record(ai, "$(P):END_MATH_CH$(CHANNEL)")
{
    field(DESC, "Math endi SAMPLE ")
    field(DTYP, "Soft Channel")
    field(PREC, "10")
    field(SCAN, "Passive")
    field(PINI, "YES")
    field(VAL, $(NELM))
}

record(calcout, "$(P):SAMPLES_MATH_CH$(CHANNEL)")
{
    field(DESC, "Math samples")
    field(INPA,"$(P):START_MATH_CH$(CHANNEL) CP")
    field(INPB,"$(P):END_MATH_CH$(CHANNEL) CP")
    field(CALC,"((B-A)>0)?B-A:$(NELM)")
    field(DOPT, "Use CALC")
    #field(OUT, "$(P):MATH_ARRAY_CH$(CHANNEL).NELM")
    #field(FLNK, "$(P):MATH_ARRAY_CH$(CHANNEL)")
}

record(calcout, "$(P):subarray_start$(CHANNEL)")
{
    field(DESC, "Math samples")
    field(INPA,"$(P):START_MATH_CH$(CHANNEL) CP")
    field(CALC,"A")
    field(DOPT, "Use CALC")
    #field(OUT, "$(P):MATH_ARRAY_CH$(CHANNEL).INDX")
    #field(FLNK, "$(P):MATH_ARRAY_CH$(CHANNEL)")
}



record(ai, "$(P):COEFF_CH$(CHANNEL)") {
    field(DESC, "Coefficient for Charge CH$(CHANNEL)")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
    field(VAL, "$(COEFF=1.0)")
}

record(ai, "$(P):XMIN_CH$(CHANNEL)") {
    field(DESC, "X min for CH$(CHANNEL) integral")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
    field(VAL, "0.0")
    field(PINI,"YES")
}

record(ai, "$(P):XMAX_CH$(CHANNEL)") {
    field(DESC, "X max for CH$(CHANNEL) integral")
    field(DTYP, "Soft Channel")
    field(PREC, "9")
    field(VAL, "1e-6")
    field(PINI,"YES")

}
