# msoxx.template
# Template for non-channel records from devTektronix_MSO58LP.db
record(bo, "$(P):Refresh")
{
    field(DESC, "Manual refresh of all channels")
    field(PINI, "NO")
    field(ZNAM, "Idle")
    field(ONAM, "Refresh")
    field(VAL, "0")
    field(HIGH, "1")
    field(FLNK, "$(P):refreshEvent_")
    field(DOL, "1")     # force 1 on processing
    field(OMSL, "supervisory")
    field(OUT, "$(P):Refresh.PROC")  # write to self for momentary behavior
}
record(event, "$(P):refreshEvent_")
{
    field(DESC, "Refresh event")
    field(SCAN, "Passive")
    field(VAL,"$(P):refreshEvent_")
    field(PINI,"YES")
    
}

record(bo, "$(P):DISABLE") 
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "0")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

# record(stringin,"$(P):IDN")
# {
#     field(DESC, "SCPI identification string")
#     field(DTYP, "stream")
#     field(INP,  "@devTektronix_MSO58LP.proto getIDN(39) $(PORT)")
#     field(PINI, "YES")
#     field(SIML, "$(P):SIM")
#     field(SIOL, "$(P):SIM:IDN")
#     field(SDIS, "$(P):DISABLE")
# }
record(stringin,"$(P):IDN")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@devTektronix_MSO58LP.proto readIDNParts($(P):Vendor,$(P):Model,$(P):Serial,$(P):CF,$(P):Firmware) $(PORT)")
    field(PINI, "YES")
    field(SCAN, "Event")
    field(EVNT, "$(P):refreshEvent_")
    
}


record(ai, "$(P):MARKER_START"){
    field(PINI, "YES")
    field(DESC, "IOC Marker start")
    field(DTYP, "Soft Channel")
    field(SCAN,"Passive")
    field(VAL, 0.0)
}


record(ai, "$(P):MARKER_END"){
    field(PINI, "YES")
    field(DESC, "IOC Marker end")
    field(DTYP, "Soft Channel")
    field(SCAN,"Passive")
    field(VAL, 0.0)
}
record(calcout,"$(P):reset_start_marker_"){
    field(DESC, "reset start marker")
    field(CALC, "0")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):MARKER_START")
    field(FLNK, "$(P):MARKER_START")
}
record(calcout,"$(P):reset_end_marker_"){
    field(DESC, "reset end marker")
    field(CALC, "0")
    field(DOPT, "Use CALC")
    field(OUT, "$(P):MARKER_END")
    field(FLNK, "$(P):MARKER_END")
}


record(stringin, "$(P):Vendor") {
}
record(stringin, "$(P):Model") {
}
record(stringin, "$(P):Serial") {
    
}
record(stringin, "$(P):CF") {
    
}
record(stringin, "$(P):Firmware") {
}

# Record length control (horizontal scale number of points)
record(longout, "$(P):SET_RECORDLENGTH")
{
    field(DESC, "Set horizontal record length")
    field(DTYP, "stream")
    field(OUT,  "@devTektronix_MSO58LP.proto setNR_PT $(PORT)")
    field(PINI, "YES")
    field(VAL, $(NELM))
    field(LOPR, "500")
    field(HOPR, "250000")
    field(DRVL, "500")
    field(DRVH, "250000")
    field(EGU, "points")
}

record(longout, "$(P):RECORDLENGTH")
{
    field(DESC, "Current record length readback")
    field(VAL, $(NELM))
    field(EGU, "points")
    field(PINI, "YES")
}

# The following two records generate values for the x-
